// prisma/global.schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma-global"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//   Enums
enum OrgType {
  SCHOOL       @map("school")
  BUS_COMPANY  @map("bus_company")
  PARENT_ORG   @map("parent_org")
  @@map("org_type")
}

enum RoleType {
  SCHOOL_STAFF @map("school_staff")
  BUS_COMPANY  @map("bus_company")
  ADMIN        @map("admin")
  FINANCE      @map("finance")
  @@map("role_type")
}

enum DataConnectionMode {
  SAAS
  BYODB
  @@map("data_connection_mode")
}

//   Tenants
model Tenants {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations    Organizations[]   @relation("TenantOrganizations")
  users            Users[]           @relation("TenantUsers")
  partnerships     Partnerships[]    @relation("TenantPartnerships")
  data_connections DataConnections[] @relation("TenantDataConnections")
  trip_registry    TripRegistry[]    @relation("TenantTripRegistry")

  @@map("tenants")
}

//   Organizations (with parent/children)
model Organizations {
  id            String   @id @default(uuid())
  tenant_id     String
  name          String
  type          OrgType
  code          String?
  parent_org_id String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @db.Timestamptz(6)

  tenants Tenants @relation("TenantOrganizations", fields: [tenant_id], references: [id])

  // self relation
  parent   Organizations?  @relation("OrgParent", fields: [parent_org_id], references: [id])
  children Organizations[] @relation("OrgParent")

  // org-level roles
  user_roles UserRoles[] @relation("UserRoleOrg")

  // back-relations for scoped roles
  scoped_roles_as_org    UserRoleScopes[] @relation("ScopeOnOrg")
  scoped_roles_as_school UserRoleScopes[] @relation("ScopeOnSchool")

  // partnerships
  partnerships_as_school     Partnerships[] @relation("SchoolPartnership")
  partnerships_as_buscompany Partnerships[] @relation("BusCompanyPartnership")

  // trip registry
  trip_registry_as_school  TripRegistry[] @relation("SchoolTrips")
  trip_registry_as_company TripRegistry[] @relation("CompanyTrips")

  // data connections
  data_connections DataConnections[] @relation("OrgDataConnections")

  @@unique([tenant_id, code])
  @@index([tenant_id])
  @@index([parent_org_id])
  @@map("organizations")
}

//   Users (control-plane)
model Users {
  id             String   @id
  tenant_id      String?
  email          String   @unique
  full_name      String?
  is_active      Boolean  @default(true)
  legacy_user_id Int?     @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  tenants     Tenants?    @relation("TenantUsers", fields: [tenant_id], references: [id])
  user_roles  UserRoles[] @relation("UserRoleUser")

  // back-relation for UserRoleScopes.users
  role_scopes UserRoleScopes[]

  @@index([tenant_id])
  @@map("global_users")
}

//   User roles (org-level)
model UserRoles {
  user_id    String
  org_id     String
  role       RoleType
  is_default Boolean  @default(false)
  created_at DateTime @default(now())

  users         Users         @relation("UserRoleUser", fields: [user_id], references: [id])
  organizations Organizations @relation("UserRoleOrg",  fields: [org_id],  references: [id])

  @@id([user_id, org_id, role])
  @@index([org_id])
  @@map("user_roles")
}

//   Fine-grained scopes: user -> (org, role) on school
model UserRoleScopes {
  user_id       String
  org_id        String
  role          RoleType
  school_org_id String
  created_at    DateTime @default(now())

  users  Users          @relation(fields: [user_id], references: [id])
  org    Organizations  @relation("ScopeOnOrg",    fields: [org_id],        references: [id])
  school Organizations  @relation("ScopeOnSchool", fields: [school_org_id], references: [id])

  @@id([user_id, org_id, role, school_org_id])
  @@index([org_id])
  @@index([school_org_id])
  @@map("user_role_scopes")
}

//   Partnerships
model Partnerships {
  id             String   @id @default(uuid())
  tenant_id      String
  school_org_id  String
  bus_company_id String
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  tenants     Tenants       @relation("TenantPartnerships", fields: [tenant_id], references: [id])
  school_org  Organizations @relation("SchoolPartnership",     fields: [school_org_id],  references: [id])
  bus_company Organizations @relation("BusCompanyPartnership", fields: [bus_company_id], references: [id])

  @@unique([tenant_id, school_org_id, bus_company_id])
  @@index([tenant_id])
  @@map("partnerships")
}

//   Data connections
model DataConnections {
  id               String   @id @default(uuid())
  tenant_id        String
  org_id           String
  mode             DataConnectionMode
  db_host          String?
  db_port          Int?
  db_name          String?
  db_user          String?
  db_schema        String?
  db_ssl           Boolean?
  vault_secret_id  String?
  last_verified_at DateTime?
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @db.Timestamptz(6)

  tenants       Tenants        @relation("TenantDataConnections", fields: [tenant_id], references: [id])
  organizations Organizations  @relation("OrgDataConnections",    fields: [org_id],    references: [id])
  trip_registry TripRegistry[] @relation("TripRegistryConn")

  @@unique([org_id, mode])
  @@index([tenant_id])
  @@index([org_id])
  @@map("data_connections")
}

//   Trip registry
model TripRegistry {
  id                 String   @id @default(uuid())
  tenant_id          String
  trip_code          String
  school_org_id      String
  bus_company_org_id String?
  data_connection_id String
  external_ref       String?
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now()) @db.Timestamptz(6)

  tenants          Tenants         @relation("TenantTripRegistry", fields: [tenant_id], references: [id])
  school_org       Organizations   @relation("SchoolTrips",  fields: [school_org_id],      references: [id])
  company_org      Organizations?  @relation("CompanyTrips", fields: [bus_company_org_id], references: [id])
  data_connections DataConnections @relation("TripRegistryConn", fields: [data_connection_id], references: [id])

  @@unique([tenant_id, trip_code])
  @@index([tenant_id])
  @@index([school_org_id])
  @@index([bus_company_org_id])
  @@map("trip_registry")
}
